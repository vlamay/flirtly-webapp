# main.py - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Flirtly

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from bot_full import FlirtlyBot
from matching_engine import MatchingEngine
from messaging_service import MessagingService, WebSocketService
from notification_service import NotificationService, NotificationScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FlirtlyApp:
    def __init__(self):
        self.bot_token = os.getenv("BOT_TOKEN", "8430527446:AAFLoCZqvreDpsgz4d5z4J5LXMLC42B9ex0")
        self.webapp_url = os.getenv("WEBAPP_URL", "https://vlamay.github.io/flirtly-webapp")
        self.database_url = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./flirtly.db")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot = None
        self.db = None
        self.cache = None
        self.websocket = None
        
        # –°–µ—Ä–≤–∏—Å—ã
        self.matching_engine = None
        self.messaging_service = None
        self.notification_service = None
        self.notification_scheduler = None
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –î–ª—è SQLite (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
            if self.database_url.startswith("sqlite"):
                import aiosqlite
                self.db = await aiosqlite.connect("flirtly.db")
                logger.info("SQLite database connected")
            
            # –î–ª—è PostgreSQL (production –≤–µ—Ä—Å–∏—è)
            elif self.database_url.startswith("postgresql"):
                import asyncpg
                self.db = await asyncpg.connect(self.database_url)
                logger.info("PostgreSQL database connected")
            
            else:
                raise ValueError(f"Unsupported database URL: {self.database_url}")
                
        except Exception as e:
            logger.error(f"Database connection failed: {e}")
            raise
    
    async def initialize_cache(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (Redis)"""
        try:
            import redis.asyncio as redis
            
            redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")
            self.cache = redis.from_url(redis_url)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.cache.ping()
            logger.info("Redis cache connected")
            
        except Exception as e:
            logger.warning(f"Redis cache not available: {e}")
            self.cache = None
    
    async def initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        # WebSocket —Å–µ—Ä–≤–∏—Å
        self.websocket = WebSocketService()
        
        # Matching Engine
        self.matching_engine = MatchingEngine(self.db, self.cache)
        
        # Messaging Service
        self.messaging_service = MessagingService(
            bot=self.bot,
            db_connection=self.db,
            cache_service=self.cache,
            websocket_service=self.websocket
        )
        
        # Notification Service
        self.notification_service = NotificationService(
            bot=self.bot,
            db_connection=self.db,
            cache_service=self.cache
        )
        
        # Notification Scheduler
        self.notification_scheduler = NotificationScheduler(self.notification_service)
        
        logger.info("All services initialized")
    
    async def setup_webhook_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ WebHook"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Web App –¥–∞–Ω–Ω—ã—Ö
        @self.bot.app.message_handler(content_types=['web_app_data'])
        async def handle_webapp_data(message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
            try:
                import json
                data = json.loads(message.web_app_data.data)
                action = data.get('action')
                
                if action == 'register':
                    await self._handle_registration(message, data)
                elif action == 'like':
                    await self._handle_like(message, data)
                elif action == 'superlike':
                    await self._handle_superlike(message, data)
                elif action == 'skip':
                    await self._handle_skip(message, data)
                elif action == 'message':
                    await self._handle_message(message, data)
                elif action == 'update_location':
                    await self._handle_location_update(message, data)
                
            except Exception as e:
                logger.error(f"Error handling webapp data: {e}")
        
        logger.info("WebHook handlers set up")
    
    async def _handle_registration(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ Web App"""
        try:
            telegram_id = message.from_user.id
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            query = """
                INSERT INTO users (
                    telegram_id, username, first_name, name, age, gender,
                    looking_for, bio, city, country, created_at
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
                ON CONFLICT (telegram_id) DO UPDATE SET
                    name = EXCLUDED.name,
                    age = EXCLUDED.age,
                    gender = EXCLUDED.gender,
                    looking_for = EXCLUDED.looking_for,
                    bio = EXCLUDED.bio,
                    city = EXCLUDED.city,
                    country = EXCLUDED.country,
                    updated_at = NOW()
                RETURNING id
            """
            
            user_id = await self.db.fetchval(
                query,
                telegram_id,
                message.from_user.username,
                message.from_user.first_name,
                data.get('name'),
                data.get('age'),
                data.get('gender'),
                data.get('looking_for'),
                data.get('bio'),
                data.get('city'),
                data.get('country')
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            photos = data.get('photos', [])
            for i, photo_url in enumerate(photos):
                photo_query = """
                    INSERT INTO photos (user_id, original_url, position, moderation_status)
                    VALUES ($1, $2, $3, 'approved')
                """
                await self.db.execute(photo_query, user_id, photo_url, i)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã
            interests = data.get('interests', [])
            for interest_name in interests:
                # –ù–∞—Ö–æ–¥–∏–º ID –∏–Ω—Ç–µ—Ä–µ—Å–∞
                interest_id = await self.db.fetchval(
                    "SELECT id FROM interests WHERE name = $1", interest_name
                )
                if interest_id:
                    await self.db.execute(
                        "INSERT INTO user_interests (user_id, interest_id) VALUES ($1, $2)",
                        user_id, interest_id
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.reply_text(
                "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flirtly! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! ‚ö°",
                parse_mode='HTML'
            )
            
            logger.info(f"User {telegram_id} registered successfully")
            
        except Exception as e:
            logger.error(f"Error handling registration: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _handle_like(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ –∏–∑ Web App"""
        try:
            from_user_id = message.from_user.id
            to_user_id = data.get('user_id')
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ telegram_id
            from_user_db_id = await self.db.fetchval(
                "SELECT id FROM users WHERE telegram_id = $1", from_user_id
            )
            
            if not from_user_db_id:
                await message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ª–∞–π–∫
            like_query = """
                INSERT INTO likes (from_user_id, to_user_id, action, created_at)
                VALUES ($1, $2, 'like', NOW())
                ON CONFLICT (from_user_id, to_user_id) DO UPDATE SET
                    action = 'like',
                    created_at = NOW()
            """
            await self.db.execute(like_query, from_user_db_id, to_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å
            mutual_like = await self.db.fetchval(
                "SELECT 1 FROM likes WHERE from_user_id = $1 AND to_user_id = $2 AND action IN ('like', 'superlike')",
                to_user_id, from_user_db_id
            )
            
            if mutual_like:
                # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
                match_query = """
                    INSERT INTO matches (user1_id, user2_id, created_at)
                    VALUES ($1, $2, NOW())
                    ON CONFLICT (user1_id, user2_id) DO NOTHING
                """
                await self.db.execute(match_query, 
                                    min(from_user_db_id, to_user_id),
                                    max(from_user_db_id, to_user_id))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self.notification_service.send_match_notification(from_user_id, to_user_id)
                await self.notification_service.send_match_notification(to_user_id, from_user_id)
                
                await message.reply_text("üéâ <b>–≠—Ç–æ Match!</b>\n\n–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ
                await self.notification_service.send_like_notification(to_user_id, from_user_db_id)
                await message.reply_text("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
            logger.info(f"Like processed: {from_user_db_id} -> {to_user_id}")
            
        except Exception as e:
            logger.error(f"Error handling like: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞")
    
    async def _handle_superlike(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–ø–µ—Ä–ª–∞–π–∫–∞"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–∞–π–∫—É, –Ω–æ —Å action = 'superlike'
        await self._handle_like(message, {**data, 'action': 'superlike'})
    
    async def _handle_skip(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞"""
        try:
            from_user_id = message.from_user.id
            to_user_id = data.get('user_id')
            
            from_user_db_id = await self.db.fetchval(
                "SELECT id FROM users WHERE telegram_id = $1", from_user_id
            )
            
            if from_user_db_id:
                skip_query = """
                    INSERT INTO likes (from_user_id, to_user_id, action, created_at)
                    VALUES ($1, $2, 'dislike', NOW())
                    ON CONFLICT (from_user_id, to_user_id) DO UPDATE SET
                        action = 'dislike',
                        created_at = NOW()
                """
                await self.db.execute(skip_query, from_user_db_id, to_user_id)
            
            logger.info(f"Skip processed: {from_user_db_id} -> {to_user_id}")
            
        except Exception as e:
            logger.error(f"Error handling skip: {e}")
    
    async def _handle_message(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Web App"""
        try:
            from_user_id = message.from_user.id
            to_user_id = data.get('to_user_id')
            content = data.get('content')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º messaging service
            result = await self.messaging_service.send_message(
                from_user=from_user_id,
                to_user=to_user_id,
                content=content,
                source='webapp'
            )
            
            if result:
                await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"Error handling message: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def _handle_location_update(self, message, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        try:
            telegram_id = message.from_user.id
            latitude = data.get('latitude')
            longitude = data.get('longitude')
            city = data.get('city')
            
            if latitude and longitude:
                location_query = """
                    UPDATE users 
                    SET location = ST_Point($1, $2), city = $3, updated_at = NOW()
                    WHERE telegram_id = $4
                """
                await self.db.execute(location_query, longitude, latitude, city, telegram_id)
            
            logger.info(f"Location updated for user {telegram_id}")
            
        except Exception as e:
            logger.error(f"Error handling location update: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Starting Flirtly App...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.initialize_database()
            await self.initialize_cache()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = FlirtlyBot(self.bot_token, self.webapp_url)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.initialize_services()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebHook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self.setup_webhook_handlers()
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.notification_scheduler:
                asyncio.create_task(self.notification_scheduler.start())
            
            logger.info("Flirtly App started successfully!")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.bot.run()
            
        except Exception as e:
            logger.error(f"Failed to start Flirtly App: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Stopping Flirtly App...")
            
            if self.notification_scheduler:
                await self.notification_scheduler.stop()
            
            if self.cache:
                await self.cache.close()
            
            if self.db:
                await self.db.close()
            
            logger.info("Flirtly App stopped")
            
        except Exception as e:
            logger.error(f"Error stopping Flirtly App: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = FlirtlyApp()
    
    try:
        await app.start()
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Application error: {e}")
    finally:
        await app.stop()

if __name__ == "__main__":
    asyncio.run(main())
