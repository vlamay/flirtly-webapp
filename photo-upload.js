// photo-upload.js - Advanced photo upload system for Telegram Mini App

class PhotoUploadSystem {
    constructor() {
        this.maxPhotos = 6;
        this.maxFileSize = 5 * 1024 * 1024; // 5MB
        this.allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
        this.qualitySettings = {
            maxWidth: 1080,
            maxHeight: 1080,
            quality: 0.8,
            format: 'image/webp'
        };
    }

    // ===================================
    // PHOTO SOURCE SELECTION
    // ===================================

    async showSourceSelector() {
        return new Promise((resolve) => {
            const modal = this.createSourceModal();
            document.body.appendChild(modal);
            
            modal.querySelector('.modal-overlay').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) {
                    this.closeModal(modal);
                    resolve(null);
                }
            });

            // Telegram camera button
            modal.querySelector('.btn-camera').addEventListener('click', () => {
                this.closeModal(modal);
                this.openTelegramCamera().then(resolve);
            });

            // Gallery button
            modal.querySelector('.btn-gallery').addEventListener('click', () => {
                this.closeModal(modal);
                this.openGallery().then(resolve);
            });
        });
    }

    createSourceModal() {
        const modal = document.createElement('div');
        modal.className = 'modal-premium active';
        modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-premium-content animate-fade-in-scale">
                <h3 class="modal-title">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ</h3>
                <p class="modal-subtitle">–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?</p>
                
                <div class="photo-source-options">
                    <button class="btn-camera btn-premium">
                        <span class="btn-icon">üì∑</span>
                        <span class="btn-text">–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ</span>
                        <span class="btn-description">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É</span>
                    </button>
                    
                    <button class="btn-gallery btn-premium">
                        <span class="btn-icon">üñºÔ∏è</span>
                        <span class="btn-text">–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏</span>
                        <span class="btn-description">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ</span>
                    </button>
                </div>
                
                <div class="photo-tips">
                    <h4>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ:</h4>
                    <ul>
                        <li>–•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ</li>
                        <li>–ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞</li>
                        <li>–û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ</li>
                        <li>–£–ª—ã–±–∫–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è!</li>
                    </ul>
                </div>
            </div>
        `;
        return modal;
    }

    // ===================================
    // TELEGRAM CAMERA INTEGRATION
    // ===================================

    async openTelegramCamera() {
        try {
            if (window.Telegram && window.Telegram.WebApp) {
                // Method 1: Modern Telegram WebApp API
                if (window.Telegram.WebApp.openCamera) {
                    return await this.useModernTelegramCamera();
                }
                
                // Method 2: Legacy API with popup
                if (window.Telegram.WebApp.showPopup) {
                    return await this.useLegacyTelegramCamera();
                }
            }
            
            // Fallback to HTML5 camera
            return await this.useHTML5Camera();
            
        } catch (error) {
            console.error('Camera access failed:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.');
            return null;
        }
    }

    async useModernTelegramCamera() {
        return new Promise((resolve, reject) => {
            window.Telegram.WebApp.openCamera(
                "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è",
                (result) => {
                    if (result && result.files && result.files.length > 0) {
                        const file = result.files[0];
                        this.processPhoto(file).then(resolve).catch(reject);
                    } else {
                        reject(new Error('–§–æ—Ç–æ –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ'));
                    }
                }
            );
        });
    }

    async useLegacyTelegramCamera() {
        return new Promise((resolve, reject) => {
            window.Telegram.WebApp.showPopup({
                title: '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ',
                message: '–†–∞–∑—Ä–µ—à–∏—Ç—å Flirtly –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è?',
                buttons: [
                    { id: 'allow', type: 'default', text: 'üì∑ –†–∞–∑—Ä–µ—à–∏—Ç—å' },
                    { id: 'gallery', type: 'default', text: 'üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è' },
                    { type: 'cancel', text: '‚ùå –û—Ç–º–µ–Ω–∞' }
                ]
            }, async (buttonId) => {
                if (buttonId === 'allow') {
                    try {
                        const result = await this.useHTML5Camera();
                        resolve(result);
                    } catch (error) {
                        reject(error);
                    }
                } else if (buttonId === 'gallery') {
                    try {
                        const result = await this.openGallery();
                        resolve(result);
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new Error('User cancelled'));
                }
            });
        });
    }

    async useHTML5Camera() {
        return new Promise((resolve, reject) => {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.capture = 'camera';
            
            input.onchange = async (e) => {
                const file = e.target.files[0];
                if (file) {
                    try {
                        const result = await this.processPhoto(file);
                        resolve(result);
                    } catch (error) {
                        reject(error);
                    }
                } else {
                    reject(new Error('No file selected'));
                }
            };
            
            input.click();
        });
    }

    // ===================================
    // TELEGRAM GALLERY ACCESS
    // ===================================

    async useTelegramGallery() {
        return new Promise((resolve, reject) => {
            // Method 1: Modern Telegram WebApp API
            if (window.Telegram.WebApp.showFileSelector) {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º showFileSelector');
                window.Telegram.WebApp.showFileSelector({
                    type: 'photo',
                    accept: 'image/*',
                    multiple: false
                }, (result) => {
                    if (result && result.files && result.files.length > 0) {
                        const file = result.files[0];
                        console.log('üìÅ Telegram file selected:', file);
                        this.processTelegramFile(file).then(resolve).catch(reject);
                    } else {
                        reject(new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ Telegram'));
                    }
                });
                return;
            }
            
            // Method 2: Legacy API with popup
            if (window.Telegram.WebApp.showPopup) {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º showPopup');
                window.Telegram.WebApp.showPopup({
                    title: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ',
                    message: '–û—Ç–∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ?',
                    buttons: [
                        { id: 'gallery', type: 'default', text: 'üñºÔ∏è –ò–∑ –≥–∞–ª–µ—Ä–µ–∏' },
                        { id: 'camera', type: 'default', text: 'üì∑ –ö–∞–º–µ—Ä–∞' },
                        { type: 'cancel', text: '‚ùå –û—Ç–º–µ–Ω–∞' }
                    ]
                }, async (buttonId) => {
                    if (buttonId === 'gallery') {
                        try {
                            // Fallback to standard gallery
                            const result = await this.useStandardGallery();
                            resolve(result);
                        } catch (error) {
                            reject(error);
                        }
                    } else if (buttonId === 'camera') {
                        try {
                            const result = await this.useTelegramCamera();
                            resolve(result);
                        } catch (error) {
                            reject(error);
                        }
                    } else {
                        reject(new Error('–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω'));
                    }
                });
                return;
            }
            
            // Fallback to standard gallery
            console.log('üì± Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥');
            this.useStandardGallery().then(resolve).catch(reject);
        });
    }

    async useTelegramCamera() {
        return new Promise((resolve, reject) => {
            if (window.Telegram.WebApp.openCamera) {
                console.log('üì∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram –∫–∞–º–µ—Ä—É');
                window.Telegram.WebApp.openCamera(
                    "–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è",
                    (result) => {
                        if (result && result.files && result.files.length > 0) {
                            const file = result.files[0];
                            console.log('üì∑ Telegram camera photo:', file);
                            this.processTelegramFile(file).then(resolve).catch(reject);
                        } else {
                            reject(new Error('–§–æ—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ'));
                        }
                    }
                );
            } else {
                reject(new Error('Telegram –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
            }
        });
    }

    async processTelegramFile(file) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            await this.validateFile(file);
            console.log('‚úÖ Telegram —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            const result = await this.processPhoto(file);
            console.log('‚úÖ Telegram —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —Ñ–∞–π–ª–∞:', error);
            throw error;
        }
    }

    // ===================================
    // GALLERY ACCESS
    // ===================================

    async openGallery() {
        console.log('üü° –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é...');
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Telegram Web App
        if (window.Telegram?.WebApp) {
            try {
                console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API');
                return await this.useTelegramGallery();
            } catch (error) {
                console.warn('‚ö†Ô∏è Telegram API failed, fallback to standard:', error);
                // Fallback to standard file input
            }
        }
        
        return this.useStandardGallery();
    }

    async useStandardGallery() {
        return new Promise((resolve, reject) => {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π input —ç–ª–µ–º–µ–Ω—Ç
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*,image/jpeg,image/png,image/webp';
            fileInput.multiple = false;
            fileInput.style.display = 'none';
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.onchange = async (event) => {
                console.log('üìÅ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
                
                const file = event.target.files[0];
                if (!file) {
                    console.log('‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
                    reject(new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'));
                    return;
                }
                
                console.log('üìÅ –§–∞–π–ª:', file.name, file.size, file.type);
                
                try {
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                    await this.validateFile(file);
                    console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
                    const result = await this.processPhoto(file);
                    console.log('‚úÖ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', result);
                    
                    resolve(result);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
                    reject(error);
                } finally {
                    // –û—á–∏—â–∞–µ–º input –∏–∑ DOM
                    if (fileInput.parentElement) {
                        fileInput.parentElement.removeChild(fileInput);
                    }
                }
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞
            fileInput.oncancel = () => {
                console.log('‚ùå –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω');
                if (fileInput.parentElement) {
                    fileInput.parentElement.removeChild(fileInput);
                }
                reject(new Error('–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω'));
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
            document.body.appendChild(fileInput);
            fileInput.click();
        });
    }

    // ===================================
    // PHOTO PROCESSING
    // ===================================

    async processPhoto(file) {
        // Show processing modal
        const processingModal = this.showProcessingModal();
        
        try {
            // Step 1: Validate file
            await this.validateFile(file);
            
            // Step 2: Show compression progress
            this.updateProcessingProgress(processingModal, 20, '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ...');
            
            // Step 3: Compress and optimize
            const compressed = await this.compressImage(file);
            this.updateProcessingProgress(processingModal, 60, '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ...');
            
            // Step 4: Detect and crop face
            const cropped = await this.cropToFace(compressed);
            this.updateProcessingProgress(processingModal, 80, 'Metric: –û–±—Ä–µ–∑–∞–µ–º —Ñ–æ—Ç–æ...');
            
            // Step 5: Final validation
            await this.validateProcessedPhoto(cropped);
            this.updateProcessingProgress(processingModal, 100, '–ì–æ—Ç–æ–≤–æ!');
            
            // Close modal after delay
            setTimeout(() => {
                this.closeModal(processingModal);
            }, 500);
            
            return {
                file: cropped,
                url: URL.createObjectURL(cropped),
                size: cropped.size,
                dimensions: await this.getImageDimensions(cropped)
            };
            
        } catch (error) {
            this.closeModal(processingModal);
            throw error;
        }
    }

    async validateFile(file) {
        // Check file type
        if (!this.allowedTypes.includes(file.type)) {
            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG –∏–ª–∏ WebP.');
        }
        
        // Check file size
        if (file.size > this.maxFileSize) {
            throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB.');
        }
        
        // Check if it's actually an image
        const isValidImage = await this.validateImageContent(file);
        if (!isValidImage) {
            throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.');
        }
    }

    async validateImageContent(file) {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => resolve(true);
            img.onerror = () => resolve(false);
            img.src = URL.createObjectURL(file);
        });
    }

    async compressImage(file) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = () => {
                // Calculate new dimensions
                let { width, height } = img;
                const maxSize = Math.max(this.qualitySettings.maxWidth, this.qualitySettings.maxHeight);
                
                if (width > maxSize || height > maxSize) {
                    const ratio = Math.min(maxSize / width, maxSize / height);
                    width *= ratio;
                    height *= ratio;
                }
                
                // Set canvas dimensions
                canvas.width = width;
                canvas.height = height;
                
                // Draw and compress
                ctx.drawImage(img, 0, 0, width, height);
                
                canvas.toBlob(
                    (blob) => resolve(blob),
                    this.qualitySettings.format,
                    this.qualitySettings.quality
                );
            };
            
            img.src = URL.createObjectURL(file);
        });
    }

    async cropToFace(imageFile) {
        // For now, return the image as-is
        // In production, you would integrate with face detection API
        return imageFile;
    }

    async validateProcessedPhoto(file) {
        // Additional validation for processed photo
        if (file.size > 2 * 1024 * 1024) { // 2MB after compression
            throw new Error('–§–æ—Ç–æ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è.');
        }
    }

    async getImageDimensions(file) {
        return new Promise((resolve) => {
            const img = new Image();
            img.onload = () => {
                resolve({
                    width: img.width,
                    height: img.height
                });
            };
            img.src = URL.createObjectURL(file);
        });
    }

    // ===================================
    // UI HELPERS
    // ===================================

    showProcessingModal() {
        const modal = document.createElement('div');
        modal.className = 'modal-premium active';
        modal.innerHTML = `
            <div class="modal-overlay"></div>
            <div class="modal-premium-content animate-fade-in-scale">
                <div class="processing-content">
                    <div class="processing-spinner">
                        <div class="spinner"></div>
                    </div>
                    <h3 class="processing-title">–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ</h3>
                    <p class="processing-status">–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...</p>
                    <div class="processing-progress">
                        <div class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        return modal;
    }

    updateProcessingProgress(modal, progress, status) {
        const progressBar = modal.querySelector('.progress-bar');
        const statusText = modal.querySelector('.processing-status');
        
        progressBar.style.width = `${progress}%`;
        statusText.textContent = status;
    }

    showError(message) {
        console.error('‚ùå Photo Upload Error:', message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userFriendlyMessage = this.getUserFriendlyErrorMessage(message);
        
        if (window.premiumUI) {
            window.premiumUI.error(userFriendlyMessage);
        } else if (window.AnimationSystem) {
            window.AnimationSystem.showToast(userFriendlyMessage, 'error');
        } else {
            alert(userFriendlyMessage);
        }
    }

    getUserFriendlyErrorMessage(error) {
        const errorMessages = {
            'File not selected': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω',
            'File too large': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB',
            'Invalid file type': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG –∏–ª–∏ WebP',
            'Network Error': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º',
            'Failed to fetch': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
            'File too large': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
            'User cancelled': '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            '–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω': '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            'Telegram –∫–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞': '–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Telegram'
        };
        
        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        for (const [key, message] of Object.entries(errorMessages)) {
            if (error.includes(key)) {
                return message;
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }

    closeModal(modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            if (modal.parentElement) {
                modal.parentElement.removeChild(modal);
            }
        }, 300);
    }

    // ===================================
    // DEBUGGING AND DIAGNOSTICS
    // ===================================

    async testPhotoUpload() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
            if (window.Telegram?.WebApp) {
                console.log('‚úÖ Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω');
                console.log('üì± Telegram version:', window.Telegram.WebApp.version);
                console.log('üì± Platform:', window.Telegram.WebApp.platform);
                console.log('üì± Available methods:', Object.keys(window.Telegram.WebApp));
            } else {
                console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É file input
            const testInput = document.createElement('input');
            testInput.type = 'file';
            testInput.accept = 'image/*';
            console.log('‚úÖ File input –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            const result = await this.openGallery();
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ:', result);
            
            return result;
        } catch (error) {
            console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error);
            throw error;
        }
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    static async quickTest() {
        console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...');
        
        const uploader = new PhotoUploadSystem();
        return await uploader.testPhotoUpload();
    }
}

// CSS for photo upload components
const photoUploadStyles = document.createElement('style');
photoUploadStyles.textContent = `
    .photo-source-options {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-4);
        margin: var(--spacing-6) 0;
    }
    
    .photo-source-options .btn-premium {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--spacing-2);
        padding: var(--spacing-6);
        text-align: center;
    }
    
    .btn-icon {
        font-size: 32px;
    }
    
    .btn-text {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
    }
    
    .btn-description {
        font-size: var(--font-size-sm);
        opacity: 0.7;
    }
    
    .photo-tips {
        background: var(--bg-glass);
        border-radius: var(--radius-lg);
        padding: var(--spacing-4);
        margin-top: var(--spacing-6);
    }
    
    .photo-tips h4 {
        margin-bottom: var(--spacing-3);
        color: var(--text-primary);
    }
    
    .photo-tips ul {
        list-style: none;
        padding: 0;
    }
    
    .photo-tips li {
        padding: var(--spacing-1) 0;
        color: var(--text-secondary);
    }
    
    .photo-tips li::before {
        content: '‚úì ';
        color: var(--success);
        font-weight: bold;
    }
    
    .processing-content {
        text-align: center;
        padding: var(--spacing-6);
    }
    
    .processing-spinner {
        margin-bottom: var(--spacing-4);
    }
    
    .processing-title {
        margin-bottom: var(--spacing-2);
        color: var(--text-primary);
    }
    
    .processing-status {
        margin-bottom: var(--spacing-4);
        color: var(--text-secondary);
        font-size: var(--font-size-sm);
    }
    
    .processing-progress {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-full);
        overflow: hidden;
    }
    
    .processing-progress .progress-bar {
        height: 100%;
        background: var(--gradient-primary);
        border-radius: var(--radius-full);
        transition: width 0.3s ease;
    }
    
    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255, 255, 255, 0.1);
        border-top: 3px solid var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;
document.head.appendChild(photoUploadStyles);

// Export for use in other modules
window.PhotoUploadSystem = PhotoUploadSystem;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.testPhotoUpload = () => PhotoUploadSystem.quickTest();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
window.debugPhotoUpload = async () => {
    console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
        if (window.Telegram?.WebApp) {
            console.log('‚úÖ Telegram WebApp:', {
                version: window.Telegram.WebApp.version,
                platform: window.Telegram.WebApp.platform,
                availableMethods: Object.keys(window.Telegram.WebApp).filter(key => 
                    typeof window.Telegram.WebApp[key] === 'function'
                )
            });
        } else {
            console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const result = await window.testPhotoUpload();
        console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error);
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏');
        console.log('2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram');
        console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º');
        throw error;
    }
};

