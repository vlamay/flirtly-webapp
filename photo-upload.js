// photo-upload.js - Fixed Photo Upload System for Telegram Web App

class PhotoUploadSystem {
    constructor() {
        this.maxPhotos = 6;
        this.maxFileSize = 5 * 1024 * 1024; // 5MB
        this.allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
        this.qualitySettings = {
            maxWidth: 1080,
            maxHeight: 1080,
            quality: 0.8,
            format: 'image/webp'
        };
    }

    // ===================================
    // MAIN GALLERY ACCESS
    // ===================================

    async openGallery() {
        console.log('üü° –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            return new Promise((resolve, reject) => {
                const fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.accept = 'image/*,image/jpeg,image/png,image/webp';
                fileInput.multiple = false;
                fileInput.style.display = 'none';
                
                fileInput.onchange = async (event) => {
                    console.log('üìÅ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
                    
                    const file = event.target.files[0];
                    if (!file) {
                        console.log('‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
                        reject(new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'));
                        return;
                    }
                    
                    console.log('üìÅ –§–∞–π–ª:', file.name, file.size, file.type);
                    
                    try {
                        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                        if (!this.allowedTypes.includes(file.type)) {
                            throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                        }
                        
                        if (file.size > this.maxFileSize) {
                            throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø—Ä–µ–≤—å—é
                        const previewUrl = URL.createObjectURL(file);
                        
                        console.log('‚úÖ –§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ:', previewUrl);
                        
                        // –û—á–∏—â–∞–µ–º input
                        if (fileInput.parentElement) {
                            fileInput.parentElement.removeChild(fileInput);
                        }
                        
                        resolve({
                            file: file,
                            url: previewUrl,
                            size: file.size
                        });
                        
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
                        if (fileInput.parentElement) {
                            fileInput.parentElement.removeChild(fileInput);
                        }
                        reject(error);
                    }
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
                document.body.appendChild(fileInput);
                fileInput.click();
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–∞–ª–µ—Ä–µ–∏:', error);
            throw error;
        }
    }

    // ===================================
    // SIMPLE PHOTO PROCESSING
    // ===================================

    async processPhoto(file) {
        try {
            console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ...');
            
            // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
            const previewUrl = URL.createObjectURL(file);
            
            return {
                file: file,
                url: previewUrl,
                size: file.size,
                name: file.name
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
            throw error;
        }
    }

    // ===================================
    // ERROR HANDLING
    // ===================================

    showError(message) {
        console.error('‚ùå Photo Upload Error:', message);
        
        const userMessage = this.getUserFriendlyMessage(message);
        
        if (window.premiumUI) {
            window.premiumUI.error(userMessage);
        } else if (window.AnimationSystem) {
            window.AnimationSystem.showToast(userMessage, 'error');
        } else {
            alert(userMessage);
        }
    }

    getUserFriendlyMessage(error) {
        const messages = {
            'File not selected': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω',
            'File too large': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB',
            'Invalid file type': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG –∏–ª–∏ WebP',
            '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG –∏–ª–∏ WebP',
            '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB'
        };
        
        for (const [key, message] of Object.entries(messages)) {
            if (error.includes(key)) {
                return message;
            }
        }
        
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }

    // ===================================
    // TESTING
    // ===================================

    async testPhotoUpload() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ...');
        
        try {
            const result = await this.openGallery();
            console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', result);
            return result;
        } catch (error) {
            console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error);
            throw error;
        }
    }

    static async quickTest() {
        const uploader = new PhotoUploadSystem();
        return await uploader.testPhotoUpload();
    }
}

// CSS for photo upload
const photoUploadStyles = document.createElement('style');
photoUploadStyles.textContent = `
    .photo-source-options {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-4);
        margin: var(--spacing-6) 0;
    }
    
    .photo-source-options .btn-premium {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: var(--spacing-2);
        padding: var(--spacing-6);
        text-align: center;
    }
    
    .btn-icon {
        font-size: 32px;
    }
    
    .btn-text {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
    }
    
    .btn-description {
        font-size: var(--font-size-sm);
        opacity: 0.7;
    }
    
    .photo-tips {
        background: var(--bg-glass);
        border-radius: var(--radius-lg);
        padding: var(--spacing-4);
        margin-top: var(--spacing-6);
    }
    
    .photo-tips h4 {
        margin-bottom: var(--spacing-3);
        color: var(--text-primary);
    }
    
    .photo-tips ul {
        list-style: none;
        padding: 0;
    }
    
    .photo-tips li {
        padding: var(--spacing-1) 0;
        color: var(--text-secondary);
    }
    
    .photo-tips li::before {
        content: '‚úì ';
        color: var(--success);
        font-weight: bold;
    }
`;
document.head.appendChild(photoUploadStyles);

// Export for use in other modules
window.PhotoUploadSystem = PhotoUploadSystem;

// Global testing functions
window.testPhotoUpload = () => PhotoUploadSystem.quickTest();

window.debugPhotoUpload = async () => {
    console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...');
    
    try {
        // Check Telegram WebApp
        if (window.Telegram?.WebApp) {
            console.log('‚úÖ Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        // Test upload
        const result = await window.testPhotoUpload();
        console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:', error);
        throw error;
    }
};