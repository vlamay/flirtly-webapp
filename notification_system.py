# notification_system.py - –°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

import requests
import json
import sqlite3
import logging
from datetime import datetime, timedelta
import time

logger = logging.getLogger(__name__)

BOT_TOKEN = "8430527446:AAFLoCZqvreDpsgz4d5z4J5LXMLC42B9ex0"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
DB_PATH = "flirtly.db"

class NotificationSystem:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type TEXT NOT NULL,
                title TEXT NOT NULL,
                message TEXT NOT NULL,
                data TEXT,
                is_sent BOOLEAN DEFAULT 0,
                sent_at DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def send_notification(self, user_id, notification_type, title, message, data=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id FROM users WHERE id = ?", (user_id,))
            result = cursor.fetchone()
            
            if not result:
                logger.error(f"User {user_id} not found")
                return False
            
            telegram_id = result[0]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            keyboard = self._create_keyboard(notification_type, data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            url = f"{BASE_URL}/sendMessage"
            payload = {
                "chat_id": telegram_id,
                "text": f"üîî <b>{title}</b>\n\n{message}",
                "parse_mode": "HTML"
            }
            
            if keyboard:
                payload["reply_markup"] = json.dumps(keyboard)
            
            response = requests.post(url, json=payload)
            
            if response.json().get("ok"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
                self._save_notification(user_id, notification_type, title, message, data)
                logger.info(f"Notification sent to user {user_id} ({telegram_id})")
                return True
            else:
                logger.error(f"Failed to send notification: {response.json()}")
                return False
                
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
            return False
        finally:
            conn.close()
    
    def _create_keyboard(self, notification_type, data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        keyboards = {
            'match': {
                "inline_keyboard": [
                    [{"text": "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", "callback_data": f"chat_{data.get('match_id')}"}],
                    [{"text": "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": f"view_{data.get('partner_id')}"}]
                ]
            },
            'like': {
                "inline_keyboard": [
                    [{"text": "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": f"view_{data.get('liker_id')}"}],
                    [{"text": "‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", "web_app": {"url": "https://vlamay.github.io/flirtly-webapp"}}]
                ]
            },
            'message': {
                "inline_keyboard": [
                    [{"text": "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", "callback_data": f"chat_{data.get('match_id')}"}],
                    [{"text": "‚ö° –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", "web_app": {"url": f"https://vlamay.github.io/flirtly-webapp/chat/{data.get('match_id')}"}}]
                ]
            },
            'premium': {
                "inline_keyboard": [
                    [{"text": "‚≠ê –ö—É–ø–∏—Ç—å Premium", "callback_data": "buy_premium"}],
                    [{"text": "üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", "callback_data": "free_trial"}]
                ]
            },
            'activity': {
                "inline_keyboard": [
                    [{"text": "‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", "web_app": {"url": "https://vlamay.github.io/flirtly-webapp"}}]
                ]
            }
        }
        
        return keyboards.get(notification_type)
    
    def _save_notification(self, user_id, notification_type, title, message, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO notifications (user_id, type, title, message, data, is_sent, sent_at)
            VALUES (?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
        ''', (user_id, notification_type, title, message, json.dumps(data) if data else None))
        
        conn.commit()
        conn.close()
    
    def send_match_notification(self, user_id, partner_name, partner_age, match_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ"""
        title = "üéâ –ù–æ–≤—ã–π –º–∞—Ç—á!"
        message = f"{partner_name}, {partner_age} —Ç–æ–∂–µ –ª–∞–π–∫–Ω—É–ª(–∞) —Ç–µ–±—è!\n\n–≠—Ç–æ –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!"
        
        data = {
            'match_id': match_id,
            'partner_name': partner_name,
            'partner_age': partner_age
        }
        
        return self.send_notification(user_id, 'match', title, message, data)
    
    def send_like_notification(self, user_id, liker_name, liker_age, liker_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ"""
        title = "‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!"
        message = f"{liker_name}, {liker_age} –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n\n–õ–∞–π–∫–Ω–∏ –≤ –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∏ –º–∞—Ç—á!"
        
        data = {
            'liker_id': liker_id,
            'liker_name': liker_name,
            'liker_age': liker_age
        }
        
        return self.send_notification(user_id, 'like', title, message, data)
    
    def send_message_notification(self, user_id, sender_name, message_preview, match_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        title = f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}"
        message = f"{message_preview[:100]}{'...' if len(message_preview) > 100 else ''}\n\n–û—Ç–≤–µ—á–∞–π –±—ã—Å—Ç—Ä–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è!"
        
        data = {
            'match_id': match_id,
            'sender_name': sender_name
        }
        
        return self.send_notification(user_id, 'message', title, message, data)
    
    def send_premium_offer_notification(self, user_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ Premium"""
        title = "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!"
        message = "–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è Premium - –ë–ï–°–ü–õ–ê–¢–ù–û! üéÅ\n\n‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è\n‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°\n‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç\n‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ê–∫—Ç–∏–≤–∏—Ä—É–π —Å–µ–π—á–∞—Å!"
        
        return self.send_notification(user_id, 'premium', title, message)
    
    def send_activity_reminder(self, user_id, days_inactive):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if days_inactive == 1:
            title = "üíî –ú—ã —Å–∫—É—á–∞–µ–º!"
            message = "–¢—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ Flirtly —Ü–µ–ª—ã–π –¥–µ–Ω—å.\n\n–í–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ —É–∂–µ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        elif days_inactive == 3:
            title = "üî• –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!"
            message = "–ó–∞ 3 –¥–Ω—è –±–µ–∑ —Ç–µ–±—è –≤ Flirtly –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:\n‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ç—á–∏ –∂–¥—É—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è\n‚Ä¢ –õ–∞–π–∫–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è...\n\n–í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–π–¥–∏ —Å–≤–æ—é –ª—é–±–æ–≤—å!"
        elif days_inactive == 7:
            title = "üíå –î–æ–ª–≥–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!"
            message = "–ü—Ä–æ—à–ª–∞ —Ü–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –±–µ–∑ —Ç–µ–±—è –≤ Flirtly.\n\n–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è:\n‚Ä¢ +50 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ\n‚Ä¢ 12 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π\n‚Ä¢ 5 –ª–∞–π–∫–æ–≤ –Ω–∞ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n–ù–µ —É–ø—É—Å–∫–∞–π —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å!"
        else:
            return False
        
        return self.send_notification(user_id, 'activity', title, message)
    
    def send_boost_notification(self, user_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –±—É—Å—Ç–µ"""
        title = "üöÄ –ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω!"
        message = "–ü–æ–ª—É—á–∏ –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ 30 –º–∏–Ω—É—Ç!\n\n‚Ä¢ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º\n‚Ä¢ –ë–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö\n\n–ò—Å–ø–æ–ª—å–∑—É–π –±—É—Å—Ç –∏ –Ω–∞–π–¥–∏ –±–æ–ª—å—à–µ –º–∞—Ç—á–µ–π!"
        
        return self.send_notification(user_id, 'boost', title, message)
    
    def send_custom_notification(self, user_id, title, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return self.send_notification(user_id, 'custom', title, message)
    
    def send_bulk_notification(self, user_ids, title, message, notification_type='custom'):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        success_count = 0
        
        for user_id in user_ids:
            if self.send_notification(user_id, notification_type, title, message):
                success_count += 1
            time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        
        logger.info(f"Bulk notification sent: {success_count}/{len(user_ids)}")
        return success_count
    
    def get_notification_history(self, user_id, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT type, title, message, is_sent, sent_at, created_at
            FROM notifications
            WHERE user_id = ?
            ORDER BY created_at DESC
            LIMIT ?
        ''', (user_id, limit))
        
        notifications = cursor.fetchall()
        conn.close()
        
        return notifications
    
    def mark_notification_as_read(self, notification_id):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE notifications
            SET is_read = 1, read_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (notification_id,))
        
        conn.commit()
        conn.close()
    
    def get_unread_notifications_count(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT COUNT(*) FROM notifications
            WHERE user_id = ? AND is_sent = 1 AND (is_read = 0 OR is_read IS NULL)
        ''', (user_id,))
        
        count = cursor.fetchone()[0]
        conn.close()
        
        return count
    
    def cleanup_old_notifications(self, days=30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            DELETE FROM notifications
            WHERE created_at < datetime('now', '-{} days')
        '''.format(days))
        
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        logger.info(f"Cleaned up {deleted_count} old notifications")
        return deleted_count

# Scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationScheduler:
    def __init__(self):
        self.notification_system = NotificationSystem()
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info("Notification scheduler started")
        
        while self.running:
            try:
                self._send_daily_notifications()
                time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            except Exception as e:
                logger.error(f"Error in notification scheduler: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("Notification scheduler stopped")
    
    def _send_daily_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('''
            SELECT id, name, last_active FROM users
            WHERE is_active = 1 AND last_active < datetime('now', '-1 day')
        ''')
        
        inactive_users = cursor.fetchall()
        
        for user_id, name, last_active in inactive_users:
            days_inactive = (datetime.now() - datetime.strptime(last_active, '%Y-%m-%d %H:%M:%S')).days
            self.notification_system.send_activity_reminder(user_id, days_inactive)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ Premium
        cursor.execute('''
            SELECT id FROM users
            WHERE is_active = 1 AND (is_premium = 0 OR premium_until < datetime('now'))
            ORDER BY RANDOM()
            LIMIT 10
        ''')
        
        free_users = [row[0] for row in cursor.fetchall()]
        
        for user_id in free_users:
            self.notification_system.send_premium_offer_notification(user_id)
        
        conn.close()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_system = NotificationSystem()
    
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_system.send_match_notification(1, "–ê–Ω–Ω–∞", 25, 1)
    notification_system.send_like_notification(1, "–ú–∏—Ö–∞–∏–ª", 28, 2)
    notification_system.send_message_notification(1, "–ï–ª–µ–Ω–∞", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", 1)
    
    print("Notification system test completed")
