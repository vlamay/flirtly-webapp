# notification_service.py - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot

import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

logger = logging.getLogger(__name__)

class NotificationService:
    def __init__(self, bot, db_connection, cache_service=None):
        self.bot = bot
        self.db = db_connection
        self.cache = cache_service
        self.webapp_url = "https://vlamay.github.io/flirtly-webapp"
    
    async def send_match_notification(self, user_id: int, match_user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –º–∞—Ç—á–µ"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_info = await self._get_match_info(user_id, match_user_id)
            if not match_info:
                logger.error(f"Match info not found for users {user_id} and {match_user_id}")
                return
            
            partner = match_info['partner']
            match_id = match_info['match_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._is_notification_enabled(user_id, 'matches'):
                logger.info(f"Match notifications disabled for user {user_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"chat_{match_id}")],
                [InlineKeyboardButton("üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_{match_user_id}")],
                [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤ Web App", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/chat/{match_id}"))]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message_text = f"""
üéâ <b>–ù–æ–≤—ã–π –º–∞—Ç—á!</b>

<b>{partner['name']}, {partner['age']}</b> —Ç–æ–∂–µ –ª–∞–π–∫–Ω—É–ª(–∞) —Ç–µ–±—è!

{b'‚≠ê' if partner['is_premium'] else ''} {partner['city']} ‚Ä¢ {partner['bio'][:100] if partner['bio'] else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...

<b>–≠—Ç–æ –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!</b>
            """.strip()
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"Match notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending match notification to {user_id}: {e}")
    
    async def send_like_notification(self, user_id: int, liker_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–Ω—É–≤—à–µ–º
            liker_info = await self._get_user_info(liker_id)
            if not liker_info:
                logger.error(f"Liker info not found for user {liker_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._is_notification_enabled(user_id, 'likes'):
                logger.info(f"Like notifications disabled for user {user_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self._is_spam_notification(user_id, 'like', liker_id):
                logger.info(f"Spam prevention: skipping like notification from {liker_id} to {user_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/profile/{liker_id}"))],
                [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", 
                                   web_app=WebAppInfo(url=self.webapp_url))]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message_text = f"""
‚ù§Ô∏è <b>–ö—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!</b>

<b>{liker_info['name']}, {liker_info['age']}</b> –∏–∑ {liker_info['city']} –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!

{b'‚≠ê' if liker_info['is_premium'] else ''} {liker_info['bio'][:100] if liker_info['bio'] else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}...

<b>–õ–∞–π–∫–Ω–∏ –≤ –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∏ –º–∞—Ç—á! üíï</b>
            """.strip()
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            await self._mark_notification_sent(user_id, 'like', liker_id)
            
            logger.info(f"Like notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending like notification to {user_id}: {e}")
    
    async def send_message_notification(self, user_id: int, sender_id: int, 
                                      message_preview: str, match_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_info = await self._get_user_info(sender_id)
            if not sender_info:
                logger.error(f"Sender info not found for user {sender_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._is_notification_enabled(user_id, 'messages'):
                logger.info(f"Message notifications disabled for user {user_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if await self._is_spam_notification(user_id, 'message', sender_id):
                logger.info(f"Spam prevention: skipping message notification from {sender_id} to {user_id}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –≤ Web App", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/chat/{match_id}"))],
                [InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∑–¥–µ—Å—å", callback_data=f"reply_{match_id}")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message_text = f"""
üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info['name']}, {sender_info['age']}</b>

{message_preview[:100]}{'...' if len(message_preview) > 100 else ''}

<b>–û—Ç–≤–µ—á–∞–π –±—ã—Å—Ç—Ä–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è! ‚ö°</b>
            """.strip()
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
            await self._mark_notification_sent(user_id, 'message', sender_id)
            
            logger.info(f"Message notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending message notification to {user_id}: {e}")
    
    async def send_premium_offer_notification(self, user_id: int, offer_type: str = 'weekly'):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if not await self._is_notification_enabled(user_id, 'premium'):
                logger.info(f"Premium notifications disabled for user {user_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ
            if await self._is_recent_notification(user_id, 'premium_offer'):
                logger.info(f"Recent premium offer notification for user {user_id}")
                return
            
            if offer_type == 'weekly':
                message_text = """
‚≠ê <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>

<b>–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è Premium - –ë–ï–°–ü–õ–ê–¢–ù–û! üéÅ</b>

‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è
‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç
‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∫–∞–∑–µ üìä

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ê–∫—Ç–∏–≤–∏—Ä—É–π —Å–µ–π—á–∞—Å!</b>
                """
            else:
                message_text = """
‚≠ê <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>

<b>–ü–æ–ª—É—á–∏ –±–æ–ª—å—à–µ –º–∞—Ç—á–µ–π —Å Premium!</b>

‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è
‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç
‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ

<b>–ü–æ–ø—Ä–æ–±—É–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>
                """
            
            keyboard = [
                [InlineKeyboardButton("‚≠ê –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_trial")],
                [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å Premium", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/premium"))],
                [InlineKeyboardButton("‚ùå –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="disable_premium_notifications")]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await self._mark_notification_sent(user_id, 'premium_offer', 'system')
            
            logger.info(f"Premium offer notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending premium offer notification to {user_id}: {e}")
    
    async def send_activity_reminder(self, user_id: int):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
            last_active = await self._get_user_last_active(user_id)
            if not last_active:
                return
            
            days_inactive = (datetime.now() - last_active).days
            
            # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if days_inactive == 1:
                message_text = """
üíî <b>–ú—ã —Å–∫—É—á–∞–µ–º!</b>

–¢—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –≤ Flirtly —Ü–µ–ª—ã–π –¥–µ–Ω—å. 

–í–æ–∑–º–æ–∂–Ω–æ, –∫—Ç–æ-—Ç–æ —É–∂–µ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ö°
                """
            elif days_inactive == 3:
                message_text = """
üî• <b>–ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</b>

–ó–∞ 3 –¥–Ω—è –±–µ–∑ —Ç–µ–±—è –≤ Flirtly –ø—Ä–æ–∏–∑–æ—à–ª–æ –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ:
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ç—á–∏ –∂–¥—É—Ç —Ç–≤–æ–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –õ–∞–π–∫–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è...

<b>–í–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–π–¥–∏ —Å–≤–æ—é –ª—é–±–æ–≤—å! üíï</b>
                """
            elif days_inactive == 7:
                message_text = """
üíå <b>–î–æ–ª–≥–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å!</b>

–ü—Ä–æ—à–ª–∞ —Ü–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –±–µ–∑ —Ç–µ–±—è –≤ Flirtly.

–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è:
‚Ä¢ +{new_users} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
‚Ä¢ {potential_matches} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
‚Ä¢ {likes_count} –ª–∞–π–∫–æ–≤ –Ω–∞ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

<b>–ù–µ —É–ø—É—Å–∫–∞–π —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å! ‚ù§Ô∏è</b>
                """
            else:
                return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            
            keyboard = [
                [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", 
                                   web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("üëÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∞–π–∫–∏", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/likes"))]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"Activity reminder sent to user {user_id} (inactive {days_inactive} days)")
            
        except Exception as e:
            logger.error(f"Error sending activity reminder to {user_id}: {e}")
    
    async def send_boost_notification(self, user_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –±—É—Å—Ç–µ"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É—Å—Ç
            has_boost = await self._has_active_boost(user_id)
            if has_boost:
                return
            
            message_text = """
üöÄ <b>–ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω!</b>

<b>–ü–æ–ª—É—á–∏ –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ 30 –º–∏–Ω—É—Ç!</b>

‚Ä¢ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º
‚Ä¢ –ë–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö

<b>–ò—Å–ø–æ–ª—å–∑—É–π –±—É—Å—Ç –∏ –Ω–∞–π–¥–∏ –±–æ–ª—å—à–µ –º–∞—Ç—á–µ–π! üíï</b>
            """
            
            keyboard = [
                [InlineKeyboardButton("üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É—Å—Ç", callback_data="activate_boost")],
                [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", 
                                   web_app=WebAppInfo(url=self.webapp_url))]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            logger.info(f"Boost notification sent to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending boost notification to {user_id}: {e}")
    
    # ===================================
    # PRIVATE METHODS
    # ===================================
    
    async def _get_match_info(self, user_id: int, match_user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ"""
        
        query = """
            SELECT 
                m.id as match_id,
                u.id, u.name, u.age, u.city, u.bio, u.is_premium
            FROM matches m
            JOIN users u ON (
                CASE 
                    WHEN m.user1_id = $1 THEN m.user2_id
                    ELSE m.user1_id
                END = u.id
            )
            WHERE (m.user1_id = $1 AND m.user2_id = $2) OR (m.user1_id = $2 AND m.user2_id = $1)
        """
        
        try:
            row = await self.db.fetchrow(query, user_id, match_user_id)
            if row:
                return {
                    'match_id': row['match_id'],
                    'partner': {
                        'id': row['id'],
                        'name': row['name'],
                        'age': row['age'],
                        'city': row['city'],
                        'bio': row['bio'],
                        'is_premium': row['is_premium']
                    }
                }
            return None
        except Exception as e:
            logger.error(f"Error getting match info: {e}")
            return None
    
    async def _get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        
        query = """
            SELECT id, name, age, city, bio, is_premium
            FROM users
            WHERE id = $1 AND is_active = true
        """
        
        try:
            row = await self.db.fetchrow(query, user_id)
            if row:
                return {
                    'id': row['id'],
                    'name': row['name'],
                    'age': row['age'],
                    'city': row['city'],
                    'bio': row['bio'],
                    'is_premium': row['is_premium']
                }
            return None
        except Exception as e:
            logger.error(f"Error getting user info: {e}")
            return None
    
    async def _is_notification_enabled(self, user_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        if self.cache:
            setting = await self.cache.get(f"notification_settings:{user_id}:{notification_type}")
            if setting is not None:
                return setting == 'true'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = """
            SELECT notification_settings
            FROM users
            WHERE id = $1
        """
        
        try:
            row = await self.db.fetchrow(query, user_id)
            if row and row['notification_settings']:
                settings = row['notification_settings']
                return settings.get(notification_type, True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
            return True
        except Exception as e:
            logger.error(f"Error checking notification settings: {e}")
            return True
    
    async def _is_spam_notification(self, user_id: int, notification_type: str, sender_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        if self.cache:
            key = f"notification_sent:{user_id}:{notification_type}:{sender_id}"
            return await self.cache.exists(key)
        
        return False
    
    async def _mark_notification_sent(self, user_id: int, notification_type: str, sender_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        
        if self.cache:
            key = f"notification_sent:{user_id}:{notification_type}:{sender_id}"
            await self.cache.set(key, '1', ttl=3600)  # 1 —á–∞—Å
    
    async def _is_recent_notification(self, user_id: int, notification_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        if self.cache:
            key = f"recent_notification:{user_id}:{notification_type}"
            return await self.cache.exists(key)
        
        return False
    
    async def _get_user_last_active(self, user_id: int) -> Optional[datetime]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        query = """
            SELECT last_active
            FROM users
            WHERE id = $1
        """
        
        try:
            row = await self.db.fetchrow(query, user_id)
            return row['last_active'] if row else None
        except Exception as e:
            logger.error(f"Error getting user last active: {e}")
            return None
    
    async def _has_active_boost(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫—ç—à–µ
        if self.cache:
            return await self.cache.exists(f"boost_active:{user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = """
            SELECT COUNT(*) as count
            FROM user_boosts
            WHERE user_id = $1 AND expires_at > NOW()
        """
        
        try:
            row = await self.db.fetchrow(query, user_id)
            return row['count'] > 0 if row else False
        except Exception as e:
            logger.error(f"Error checking active boost: {e}")
            return False

# Scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationScheduler:
    def __init__(self, notification_service):
        self.notification_service = notification_service
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        logger.info("Notification scheduler started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = [
            self._daily_activity_reminders(),
            self._weekly_premium_offers(),
            self._boost_availability_checks()
        ]
        
        await asyncio.gather(*tasks)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("Notification scheduler stopped")
    
    async def _daily_activity_reminders(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 1 –¥–Ω—è
                inactive_users = await self._get_inactive_users(days=1)
                
                for user_id in inactive_users:
                    await self.notification_service.send_activity_reminder(user_id)
                    await asyncio.sleep(1)  # –ù–µ —Å–ø–∞–º–∏–º
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                await asyncio.sleep(24 * 3600)  # 24 —á–∞—Å–∞
                
            except Exception as e:
                logger.error(f"Error in daily activity reminders: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _weekly_premium_offers(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Premium"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Premium
                free_users = await self._get_free_users()
                
                for user_id in free_users:
                    await self.notification_service.send_premium_offer_notification(user_id, 'weekly')
                    await asyncio.sleep(2)  # –ù–µ —Å–ø–∞–º–∏–º
                
                # –ñ–¥–µ–º –Ω–µ–¥–µ–ª—é
                await asyncio.sleep(7 * 24 * 3600)  # 7 –¥–Ω–µ–π
                
            except Exception as e:
                logger.error(f"Error in weekly premium offers: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _boost_availability_checks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É—Å—Ç–æ–≤"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –±—É—Å—Ç–∞
                active_users = await self._get_active_users_without_boost()
                
                for user_id in active_users:
                    await self.notification_service.send_boost_notification(user_id)
                    await asyncio.sleep(1)  # –ù–µ —Å–ø–∞–º–∏–º
                
                # –ñ–¥–µ–º 6 —á–∞—Å–æ–≤
                await asyncio.sleep(6 * 3600)  # 6 —á–∞—Å–æ–≤
                
            except Exception as e:
                logger.error(f"Error in boost availability checks: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _get_inactive_users(self, days: int) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = """
            SELECT id FROM users
            WHERE is_active = true
            AND last_active < NOW() - INTERVAL '%s days'
            AND is_premium = false
            LIMIT 100
        """ % days
        
        try:
            rows = await self.notification_service.db.fetch(query)
            return [row['id'] for row in rows]
        except Exception as e:
            logger.error(f"Error getting inactive users: {e}")
            return []
    
    async def _get_free_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Premium"""
        query = """
            SELECT id FROM users
            WHERE is_active = true
            AND (is_premium = false OR premium_until < NOW())
            LIMIT 50
        """
        
        try:
            rows = await self.notification_service.db.fetch(query)
            return [row['id'] for row in rows]
        except Exception as e:
            logger.error(f"Error getting free users: {e}")
            return []
    
    async def _get_active_users_without_boost(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –±—É—Å—Ç–∞"""
        query = """
            SELECT id FROM users
            WHERE is_active = true
            AND last_active > NOW() - INTERVAL '1 day'
            AND NOT EXISTS (
                SELECT 1 FROM user_boosts
                WHERE user_id = users.id AND expires_at > NOW()
            )
            LIMIT 30
        """
        
        try:
            rows = await self.notification_service.db.fetch(query)
            return [row['id'] for row in rows]
        except Exception as e:
            logger.error(f"Error getting active users without boost: {e}")
            return []
