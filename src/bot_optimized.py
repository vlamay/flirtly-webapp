# src/bot_optimized.py - Optimized bot with database utilities

import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from src.database import init_db
from src.db_utils import DatabaseManager

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
BOT_TOKEN = "8430527446:AAFLoCZqvreDpsgz4d5z4J5LXMLC42B9ex0"
WEBAPP_URL = "https://vlamay.github.io/flirtly-webapp/"

# Initialize
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def get_main_keyboard() -> InlineKeyboardMarkup:
    """Main keyboard with Web App"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üíï –ú–∞—Ç—á–∏", callback_data="matches")
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="referral"),
            InlineKeyboardButton(text="‚≠ê Premium", callback_data="premium")
        ]
    ])


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Start command with referral handling and user management"""
    telegram_id = message.from_user.id
    username = message.from_user.username
    
    # Get or create user
    user = await DatabaseManager.get_or_create_user(telegram_id, username)
    
    # Handle referral
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("ref_"):
        try:
            referrer_telegram_id = int(args[1].replace("ref_", ""))
            result = await DatabaseManager.process_referral(referrer_telegram_id, user.id)
            
            if result['success']:
                # Notify referrer
                try:
                    await bot.send_message(
                        referrer_telegram_id,
                        f"üéÅ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                        f"@{username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!\n\n"
                        f"–¢—ã –ø–æ–ª—É—á–∏–ª +{result['referrer_bonus']} –ª–∞–π–∫–æ–≤! ‚ù§Ô∏è",
                        parse_mode="HTML"
                    )
                except:
                    pass
                
                referral_bonus_text = f"\n\nüéÅ <b>–ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–≥–∞:</b> +{result['new_user_bonus']} –ª–∞–π–∫–æ–≤!"
        except:
            referral_bonus_text = ""
    else:
        referral_bonus_text = ""
    
    # Check if profile is complete
    if not user.name or not user.photos:
        # New user - needs onboarding
        welcome_text = f"""
<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Flirtly</b> ‚ö°

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –ø—Ä—è–º–æ –≤ Telegram!{referral_bonus_text}

<b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>
‚Ä¢ üíï –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
‚Ä¢ ‚ö° Swipe –∫–∞–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
‚Ä¢ üí¨ Instant —á–∞—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
‚Ä¢ üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è

<b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!</b>
        """.strip()
    else:
        # Existing user with profile
        stats = await DatabaseManager.get_user_stats(user.id)
        welcome_text = f"""
<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}! üëã</b>

<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {stats.get('daily_likes_remaining', 0)}
‚Ä¢ üíï –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user.matches_count}
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è: {user.views_count}
‚Ä¢ üìä –õ–∞–π–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('likes_this_week', 0)}{referral_bonus_text}

<b>–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–∞–π–ø!</b>
        """.strip()
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )


@dp.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    """Handle data from Web App with optimized database operations"""
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')
        telegram_id = message.from_user.id
        
        user = await DatabaseManager.get_user_by_telegram_id(telegram_id)
        if not user:
            user = await DatabaseManager.get_or_create_user(telegram_id, message.from_user.username)
        
        if action == 'register':
            # Handle registration with all profile data
            success = await DatabaseManager.update_user_profile(
                telegram_id,
                name=data.get('name'),
                age=data.get('age'),
                gender=data.get('gender'),
                looking_for=data.get('looking_for'),
                bio=data.get('bio', ''),
                photos=','.join(data.get('photos', [])),
                city=data.get('city'),
                country=data.get('country'),
                latitude=data.get('latitude'),
                longitude=data.get('longitude')
            )
            
            if success:
                await message.answer(
                    f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data.get('name')}!\n\n"
                    f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! ‚ö°",
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        
        elif action == 'like' or action == 'superlike':
            profile_id = data.get('profile_id')
            is_super_like = (action == 'superlike')
            
            # Check limits
            if user.daily_likes_remaining <= 0:
                await message.answer(
                    "üòî <b>–õ–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
                    "–ü–æ–ª—É—á–∏ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –ª–∞–π–∫–æ–≤!",
                    parse_mode="HTML"
                )
                return
            
            # Create like
            like = await DatabaseManager.create_like(
                user.id,
                profile_id,
                is_super_like
            )
            
            if like:
                # Check for mutual like (match)
                is_mutual = await DatabaseManager.check_mutual_like(user.id, profile_id)
                
                if is_mutual:
                    # Create match
                    match = await DatabaseManager.create_match(user.id, profile_id)
                    
                    if match:
                        # Get matched user info
                        matched_user = await DatabaseManager.get_user_by_telegram_id(profile_id)
                        
                        await message.answer(
                            f"üéâ <b>–≠—Ç–æ Match!</b>\n\n"
                            f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å {matched_user.name if matched_user else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}!\n\n"
                            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è! üí¨",
                            parse_mode="HTML"
                        )
                        
                        # Notify matched user
                        if matched_user:
                            try:
                                await bot.send_message(
                                    matched_user.telegram_id,
                                    f"üéâ <b>–ù–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!</b>\n\n"
                                    f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å {user.name}!\n\n"
                                    f"–û—Ç–∫—Ä–æ–π Flirtly –∏ –Ω–∞—á–Ω–∏ –æ–±—â–∞—Ç—å—Å—è! üí¨",
                                    parse_mode="HTML",
                                    reply_markup=get_main_keyboard()
                                )
                            except:
                                pass
                else:
                    emoji = "‚≠ê" if is_super_like else "‚ù§Ô∏è"
                    await message.answer(f"{emoji} –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞")
        
        elif action == 'skip':
            profile_id = data.get('profile_id')
            await DatabaseManager.create_skip(user.id, profile_id)
            await message.answer("üëé –ü—Ä–æ–ø—É—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"Error handling webapp data: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "profile")
async def callback_profile(callback):
    """Show detailed profile information"""
    user = await DatabaseManager.get_user_by_telegram_id(callback.from_user.id)
    
    if not user or not user.name:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
        return
    
    stats = await DatabaseManager.get_user_stats(user.id)
    
    profile_text = f"""
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {user.name}, {user.age}
‚Ä¢ –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –û —Å–µ–±–µ: {user.bio or '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –õ–∞–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.likes_sent}
‚Ä¢ –õ–∞–π–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user.likes_received}
‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user.matches_count}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user.views_count}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –õ–∞–π–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('likes_this_week', 0)}
‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('matches_this_week', 0)}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {stats.get('views_this_week', 0)}

<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {user.subscription_type.upper()}
    """.strip()
    
    await callback.message.edit_text(
        profile_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "matches")
async def callback_matches(callback):
    """Show user matches"""
    user = await DatabaseManager.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return
    
    matches = await DatabaseManager.get_user_matches(user.id)
    
    if not matches:
        await callback.message.edit_text(
            "üíï <b>–¢–≤–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</b>\n\n"
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.\n\n"
            "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏ —Å–≤–∞–π–ø–∞—Ç—å!",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
    else:
        text = f"üíï <b>–¢–≤–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({len(matches)})</b>\n\n"
        
        for match in matches[:10]:  # Show first 10 matches
            text += f"‚Ä¢ {match['user'].name}, {match['user'].age}\n"
        
        if len(matches) > 10:
            text += f"\n... –∏ –µ—â–µ {len(matches) - 10} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
    
    await callback.answer()


@dp.callback_query(F.data == "referral")
async def callback_referral(callback):
    """Show referral program"""
    user = await DatabaseManager.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        return
    
    ref_link = f"https://t.me/FFlirtly_bot?start=ref_{user.telegram_id}"
    stats = await DatabaseManager.get_referral_stats(user.id)
    
    await callback.message.edit_text(
        f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        f"<b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:</b>\n"
        f"‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å: +10 –ª–∞–π–∫–æ–≤\n"
        f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +5 –ª–∞–π–∫–æ–≤\n\n"
        f"<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {stats['total_referrals']}\n"
        f"‚ù§Ô∏è –ë–æ–Ω—É—Å–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {user.bonus_likes}\n\n"
        f"<b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                    url=f"https://t.me/share/url?url={ref_link}&text=üî• –ü–æ–ø—Ä–æ–±—É–π Flirtly!"
                )
            ],
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "premium")
async def callback_premium(callback):
    """Show premium options"""
    await callback.message.edit_text(
        "‚≠ê <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "<b>üåü PREMIUM (250 ‚≠ê/–º–µ—Å—è—Ü)</b>\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏\n"
        "‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤/–¥–µ–Ω—å\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª\n\n"
        "<b>üíé PLATINUM (500 ‚≠ê/–º–µ—Å—è—Ü)</b>\n"
        "‚Ä¢ –í—Å—ë –∏–∑ Premium +\n"
        "‚Ä¢ AI —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∫–∞–∑–µ\n"
        "‚Ä¢ –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º\n\n"
        "–û—Ñ–æ—Ä–º–∏ —á–µ—Ä–µ–∑ Web App!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "back")
async def callback_back(callback):
    """Back to main menu"""
    await callback.message.edit_text(
        f"<b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!</b>\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Flirtly!",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


async def main():
    """Start bot with optimized database"""
    logger.info("Initializing optimized database...")
    await init_db()
    
    logger.info("Starting Flirtly Bot with optimized database operations...")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
