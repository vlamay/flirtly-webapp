# messaging_service.py - –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –∏ Web App

import asyncio
import logging
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
import json
import uuid

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo

logger = logging.getLogger(__name__)

@dataclass
class Message:
    id: int
    match_id: int
    sender_id: int
    content: str
    message_type: str = 'text'
    media_url: Optional[str] = None
    is_read: bool = False
    created_at: datetime

@dataclass
class ChatSession:
    match_id: int
    user1_id: int
    user2_id: int
    last_message_at: Optional[datetime]
    unread_count_user1: int = 0
    unread_count_user2: int = 0
    is_active: bool = True

class MessagingService:
    def __init__(self, bot, db_connection, cache_service=None, websocket_service=None):
        self.bot = bot
        self.db = db_connection
        self.cache = cache_service
        self.websocket = websocket_service
        self.active_chats = {}  # In-memory cache –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    
    async def send_message(self, from_user: int, to_user: int, content: str, 
                          source: str = 'webapp', message_type: str = 'text',
                          media_url: Optional[str] = None) -> Optional[Message]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        try:
            # 1. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Ç—á
            match = await self._get_or_create_match(from_user, to_user)
            if not match:
                logger.error(f"No match found between users {from_user} and {to_user}")
                return None
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            message = await self._save_message(
                match_id=match['id'],
                sender_id=from_user,
                content=content,
                message_type=message_type,
                media_url=media_url
            )
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            await self._update_chat_stats(match['id'], from_user, to_user)
            
            # 4. Real-time –¥–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω –≤ WebApp)
            if self.websocket:
                await self._send_websocket_notification(to_user, message)
            
            # 5. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–Ω–ª–∞–π–Ω –≤ WebApp)
            if not await self._is_user_in_webapp(to_user):
                await self._send_telegram_notification(to_user, from_user, content, match['id'])
            
            # 6. –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞ –≤ Telegram
            await self._activate_telegram_chat_mode(from_user, to_user)
            
            logger.info(f"Message sent from {from_user} to {to_user}: {content[:50]}...")
            return message
            
        except Exception as e:
            logger.error(f"Error sending message from {from_user} to {to_user}: {e}")
            return None
    
    async def get_chat_messages(self, user_id: int, match_id: int, limit: int = 50) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        
        query = """
            SELECT 
                m.id, m.match_id, m.sender_id, m.content, m.message_type,
                m.media_url, m.is_read, m.created_at,
                u.name as sender_name
            FROM messages m
            JOIN users u ON m.sender_id = u.id
            WHERE m.match_id = $1
            ORDER BY m.created_at DESC
            LIMIT $2
        """
        
        try:
            rows = await self.db.fetch(query, match_id, limit)
            messages = []
            
            for row in rows:
                message = Message(
                    id=row['id'],
                    match_id=row['match_id'],
                    sender_id=row['sender_id'],
                    content=row['content'],
                    message_type=row['message_type'],
                    media_url=row['media_url'],
                    is_read=row['is_read'],
                    created_at=row['created_at']
                )
                messages.append(message)
            
            return list(reversed(messages))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            
        except Exception as e:
            logger.error(f"Error getting chat messages for match {match_id}: {e}")
            return []
    
    async def get_user_chats(self, user_id: int) -> List[ChatSession]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        query = """
            SELECT 
                m.id as match_id,
                CASE 
                    WHEN m.user1_id = $1 THEN m.user2_id
                    ELSE m.user1_id
                END as partner_id,
                u.name as partner_name,
                u.age as partner_age,
                u.city as partner_city,
                u.is_premium as partner_premium,
                p.medium_url as partner_photo,
                m.last_message_at,
                m.is_active,
                COUNT(msg.id) as unread_count
            FROM matches m
            JOIN users u ON (
                CASE 
                    WHEN m.user1_id = $1 THEN m.user2_id
                    ELSE m.user1_id
                END = u.id
            )
            LEFT JOIN photos p ON u.id = p.user_id AND p.position = 0 AND p.moderation_status = 'approved'
            LEFT JOIN messages msg ON m.id = msg.match_id 
                AND msg.sender_id != $1 
                AND msg.is_read = false
            WHERE (m.user1_id = $1 OR m.user2_id = $1)
            AND m.is_active = true
            GROUP BY m.id, m.user1_id, m.user2_id, u.name, u.age, u.city, 
                     u.is_premium, p.medium_url, m.last_message_at, m.is_active
            ORDER BY m.last_message_at DESC NULLS LAST
        """
        
        try:
            rows = await self.db.fetch(query, user_id)
            chats = []
            
            for row in rows:
                chat = ChatSession(
                    match_id=row['match_id'],
                    user1_id=user_id,
                    user2_id=row['partner_id'],
                    last_message_at=row['last_message_at'],
                    unread_count_user1=row['unread_count'],
                    is_active=row['is_active']
                )
                chats.append(chat)
            
            return chats
            
        except Exception as e:
            logger.error(f"Error getting user chats for user {user_id}: {e}")
            return []
    
    async def mark_messages_as_read(self, user_id: int, match_id: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        
        query = """
            UPDATE messages 
            SET is_read = true, read_at = NOW()
            WHERE match_id = $1 AND sender_id != $2 AND is_read = false
        """
        
        try:
            await self.db.execute(query, match_id, user_id)
            logger.info(f"Messages marked as read for user {user_id} in match {match_id}")
        except Exception as e:
            logger.error(f"Error marking messages as read: {e}")
    
    async def handle_telegram_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–∞—Ç–µ"""
        
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        active_chat = await self.get_active_telegram_chat(user_id)
        
        if active_chat:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á—É
            success = await self.send_message(
                from_user=user_id,
                to_user=active_chat['partner_id'],
                content=message_text,
                source='telegram'
            )
            
            if success:
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ Web App
            await update.message.reply_text(
                "üí¨ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
                "–û—Ç–∫—Ä–æ–π Web App —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç—ã", 
                                       web_app=WebAppInfo(url=f"{self.webapp_url}/chats"))
                ]])
            )
    
    async def start_telegram_chat(self, user_id: int, match_id: int):
        """–ù–∞—á–∞—Ç—å —á–∞—Ç –≤ Telegram —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ç—á–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match_info = await self._get_match_info(user_id, match_id)
        if not match_info:
            return False
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞
        await self._activate_telegram_chat_mode(user_id, match_info['partner_id'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ <b>–ß–∞—Ç —Å {match_info['partner_name']}</b>\n\n"
                     f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å!\n"
                     f"–ò–ª–∏ –æ—Ç–∫—Ä–æ–π Web App –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å –≤ Web App", 
                                       web_app=WebAppInfo(url=f"{self.webapp_url}/chat/{match_id}"))]
                ])
            )
        except Exception as e:
            logger.error(f"Error sending chat notification to {user_id}: {e}")
        
        return True
    
    # ===================================
    # PRIVATE METHODS
    # ===================================
    
    async def _get_or_create_match(self, user1_id: int, user2_id: int) -> Optional[Dict]:
        """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á
        query = """
            SELECT id, user1_id, user2_id, is_active
            FROM matches
            WHERE (user1_id = $1 AND user2_id = $2) OR (user1_id = $2 AND user2_id = $1)
        """
        
        match = await self.db.fetchrow(query, user1_id, user2_id)
        
        if match:
            return {
                'id': match['id'],
                'user1_id': match['user1_id'],
                'user2_id': match['user2_id'],
                'is_active': match['is_active']
            }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á
        try:
            insert_query = """
                INSERT INTO matches (user1_id, user2_id, created_at)
                VALUES ($1, $2, NOW())
                RETURNING id
            """
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ user1_id < user2_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            id1, id2 = sorted([user1_id, user2_id])
            
            match_id = await self.db.fetchval(insert_query, id1, id2)
            
            return {
                'id': match_id,
                'user1_id': id1,
                'user2_id': id2,
                'is_active': True
            }
            
        except Exception as e:
            logger.error(f"Error creating match between {user1_id} and {user2_id}: {e}")
            return None
    
    async def _save_message(self, match_id: int, sender_id: int, content: str,
                           message_type: str = 'text', media_url: Optional[str] = None) -> Message:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        query = """
            INSERT INTO messages (match_id, sender_id, content, message_type, media_url, created_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
            RETURNING id, match_id, sender_id, content, message_type, media_url, is_read, created_at
        """
        
        row = await self.db.fetchrow(query, match_id, sender_id, content, message_type, media_url)
        
        return Message(
            id=row['id'],
            match_id=row['match_id'],
            sender_id=row['sender_id'],
            content=row['content'],
            message_type=row['message_type'],
            media_url=row['media_url'],
            is_read=row['is_read'],
            created_at=row['created_at']
        )
    
    async def _update_chat_stats(self, match_id: int, sender_id: int, recipient_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        query = """
            UPDATE matches 
            SET last_message_at = NOW()
            WHERE id = $1
        """
        await self.db.execute(query, match_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        unread_query = """
            UPDATE users 
            SET unread_messages_count = (
                SELECT COUNT(*) FROM messages m
                JOIN matches mt ON m.match_id = mt.id
                WHERE (mt.user1_id = $1 OR mt.user2_id = $1)
                AND m.sender_id != $1
                AND m.is_read = false
            )
            WHERE id = $1
        """
        await self.db.execute(unread_query, recipient_id)
    
    async def _send_websocket_notification(self, user_id: int, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket"""
        
        if self.websocket:
            try:
                await self.websocket.send_to_user(user_id, {
                    'type': 'new_message',
                    'message': {
                        'id': message.id,
                        'match_id': message.match_id,
                        'sender_id': message.sender_id,
                        'content': message.content,
                        'message_type': message.message_type,
                        'media_url': message.media_url,
                        'created_at': message.created_at.isoformat()
                    }
                })
            except Exception as e:
                logger.error(f"Error sending websocket notification: {e}")
    
    async def _send_telegram_notification(self, user_id: int, sender_id: int, 
                                        content: str, match_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender_info = await self.db.fetchrow(
                "SELECT name, age FROM users WHERE id = $1", sender_id
            )
            
            if not sender_info:
                return
            
            sender_name = sender_info['name']
            sender_age = sender_info['age']
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            preview = content[:100] + "..." if len(content) > 100 else content
            
            keyboard = [
                [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –≤ Web App", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/chat/{match_id}"))],
                [InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –∑–¥–µ—Å—å", callback_data=f"reply_{match_id}")]
            ]
            
            await self.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}, {sender_age}</b>\n\n{preview}",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"Error sending telegram notification: {e}")
    
    async def _activate_telegram_chat_mode(self, user1_id: int, user2_id: int):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ –≤ Telegram"""
        
        if self.cache:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –Ω–∞ 1 —á–∞—Å
            await self.cache.set(f"telegram_chat:{user1_id}", user2_id, ttl=3600)
            await self.cache.set(f"telegram_chat:{user2_id}", user1_id, ttl=3600)
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        self.active_chats[user1_id] = user2_id
        self.active_chats[user2_id] = user1_id
    
    async def get_active_telegram_chat(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ Telegram"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache:
            partner_id = await self.cache.get(f"telegram_chat:{user_id}")
            if partner_id:
                return {'partner_id': int(partner_id)}
        
        # –ó–∞—Ç–µ–º –ø–∞–º—è—Ç—å
        if user_id in self.active_chats:
            return {'partner_id': self.active_chats[user_id]}
        
        return None
    
    async def _is_user_in_webapp(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Web App"""
        
        if self.cache:
            return await self.cache.exists(f"webapp_online:{user_id}")
        
        return False
    
    async def _get_match_info(self, user_id: int, match_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ"""
        
        query = """
            SELECT 
                m.id,
                CASE 
                    WHEN m.user1_id = $1 THEN m.user2_id
                    ELSE m.user1_id
                END as partner_id,
                u.name as partner_name,
                u.age as partner_age
            FROM matches m
            JOIN users u ON (
                CASE 
                    WHEN m.user1_id = $1 THEN m.user2_id
                    ELSE m.user1_id
                END = u.id
            )
            WHERE m.id = $2 AND (m.user1_id = $1 OR m.user2_id = $1)
        """
        
        try:
            row = await self.db.fetchrow(query, user_id, match_id)
            if row:
                return {
                    'id': row['id'],
                    'partner_id': row['partner_id'],
                    'partner_name': row['partner_name'],
                    'partner_age': row['partner_age']
                }
            return None
        except Exception as e:
            logger.error(f"Error getting match info: {e}")
            return None

# WebSocket Service –¥–ª—è real-time —Å–æ–æ–±—â–µ–Ω–∏–π
class WebSocketService:
    def __init__(self):
        self.connections = {}  # user_id -> websocket
    
    async def connect(self, user_id: int, websocket):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ WebSocket"""
        self.connections[user_id] = websocket
        logger.info(f"User {user_id} connected to websocket")
    
    async def disconnect(self, user_id: int):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç WebSocket"""
        if user_id in self.connections:
            del self.connections[user_id]
            logger.info(f"User {user_id} disconnected from websocket")
    
    async def send_to_user(self, user_id: int, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.connections:
            try:
                websocket = self.connections[user_id]
                await websocket.send_text(json.dumps(data))
            except Exception as e:
                logger.error(f"Error sending websocket message to {user_id}: {e}")
                await self.disconnect(user_id)
    
    async def broadcast_to_match(self, match_id: int, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –º–∞—Ç—á–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
        # –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É
        pass
