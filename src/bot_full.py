# bot_full.py - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Telegram Bot —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ inline –∫–Ω–æ–ø–∫–∞–º–∏

import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from typing import Optional
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FlirtlyBot:
    def __init__(self, token: str, webapp_url: str):
        self.token = token
        self.webapp_url = webapp_url
        self.app = Application.builder().token(token).build()
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # Commands
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("profile", self.profile))
        self.app.add_handler(CommandHandler("matches", self.matches))
        self.app.add_handler(CommandHandler("search", self.search))
        self.app.add_handler(CommandHandler("settings", self.settings))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("premium", self.premium))
        
        # Callback queries (inline buttons)
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Messages (–¥–ª—è —á–∞—Ç–∞ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏)
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context):
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        logger.info(f"User {user.id} ({user.username}) started the bot")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_exists = await self.check_user_exists(user.id)
        
        if not user_exists:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            welcome_text = f"""
üî• <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Flirtly</b> ‚ö° - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!

<b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>
‚Ä¢ üíï –£–º–Ω—ã–π –ø–æ–¥–±–æ—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
‚Ä¢ ‚ö° Swipe –∫–∞–∫ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö  
‚Ä¢ üí¨ –û–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ Telegram
‚Ä¢ üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π

<b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
            """
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data = await self.get_user_data(user.id)
            welcome_text = f"""
<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data.get('name', user.first_name)}! üëã</b>

<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {10 - user_data.get('likes_sent', 0)}
‚Ä¢ üíï –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user_data.get('matches_count', 0)}
‚Ä¢ üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {user_data.get('active_chats', 0)}

<b>–ì–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?</b>
            """
        
        keyboard = [
            [InlineKeyboardButton(
                "‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly", 
                web_app=WebAppInfo(url=self.webapp_url)
            )],
            [
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üíï –ú–æ–∏ –º–∞—Ç—á–∏", callback_data="matches")
            ],
            [
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å", callback_data="search"),
                InlineKeyboardButton("üí¨ –ß–∞—Ç—ã", callback_data="chats")
            ],
            [
                InlineKeyboardButton("‚≠ê Premium", callback_data="premium"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ],
            [InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def profile(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /profile"""
        user_id = update.effective_user.id
        user_data = await self.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ Web App!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ö° –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
                                       web_app=WebAppInfo(url=self.webapp_url))
                ]])
            )
            return
        
        profile_text = f"""
üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ü–æ–ª: {user_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –ò—â—É: {user_data.get('looking_for', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ì–æ—Ä–æ–¥: {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_data.get('likes_sent', 0)}
‚Ä¢ üíï –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {user_data.get('likes_received', 0)}
‚Ä¢ üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user_data.get('matches_count', 0)}
‚Ä¢ üì∏ –§–æ—Ç–æ: {len(user_data.get('photos', []))}

<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚≠ê Premium' if user_data.get('is_premium') else 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}
‚Ä¢ –î–æ: {user_data.get('premium_until', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
        """
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                                web_app=WebAppInfo(url=f"{self.webapp_url}/profile"))],
            [InlineKeyboardButton("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            profile_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def matches(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /matches"""
        user_id = update.effective_user.id
        matches = await self.get_user_matches(user_id)
        
        if not matches:
            matches_text = """
üíï <b>–ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π üòî

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏:</b>
‚Ä¢ üì∏ –î–æ–±–∞–≤—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ ‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é
‚Ä¢ üîç –ê–∫—Ç–∏–≤–Ω–æ —Å–≤–∞–π–ø–∞–π –∞–Ω–∫–µ—Ç—ã
‚Ä¢ ‚≠ê –ö—É–ø–∏ Premium –¥–ª—è –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

<b>–ù–∞—á–Ω–∏ –∏—Å–∫–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
            """
            keyboard = [
                [InlineKeyboardButton("‚ö° –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", 
                                    web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        else:
            matches_text = "üíï <b>–ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</b>\n\n"
            keyboard = []
            
            for i, match in enumerate(matches[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                matches_text += f"{i+1}. <b>{match['name']}</b>, {match['age']}\n"
                keyboard.append([InlineKeyboardButton(
                    f"üí¨ –ß–∞—Ç —Å {match['name']}", 
                    callback_data=f"chat_{match['id']}"
                )])
            
            if len(matches) > 5:
                matches_text += f"\n... –∏ –µ—â–µ {len(matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
            
            keyboard.extend([
                [InlineKeyboardButton("üëÄ –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", 
                                    web_app=WebAppInfo(url=f"{self.webapp_url}/matches"))],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            matches_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def search(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /search"""
        user_id = update.effective_user.id
        user_data = await self.get_user_data(user_id)
        
        if not user_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ Web App!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ö° –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", 
                                       web_app=WebAppInfo(url=self.webapp_url))
                ]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        likes_left = 10 - user_data.get('likes_sent', 0)
        
        if likes_left <= 0:
            search_text = """
üîç <b>–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç</b>

‚ùå –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∞–π–∫–∏!

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤:</b>
‚Ä¢ ‚≠ê –ö—É–ø–∏ Premium - –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏
‚Ä¢ üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã
‚Ä¢ ‚è∞ –ü–æ–¥–æ–∂–¥–∏ –¥–æ –∑–∞–≤—Ç—Ä–∞ - –ª–∞–π–∫–∏ –æ–±–Ω–æ–≤—è—Ç—Å—è

<b>Premium –ø–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è
‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç
‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ
            """
            keyboard = [
                [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Premium", callback_data="premium")],
                [InlineKeyboardButton("üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        else:
            search_text = f"""
üîç <b>–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç</b>

<b>–ì–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!</b>

<b>–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age_min', 18)}-{user_data.get('age_max', 99)}
‚Ä¢ –ü–æ–ª: {user_data.get('looking_for', '–í—Å–µ')}
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {user_data.get('max_distance', 50)} –∫–º

<b>–õ–∞–π–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {likes_left}</b>

<b>–ù–∞—á–Ω–∏ —Å–≤–∞–π–ø–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
            """
            keyboard = [
                [InlineKeyboardButton("‚ö° –ù–∞—á–∞—Ç—å —Å–≤–∞–π–ø–∞—Ç—å", 
                                    web_app=WebAppInfo(url=self.webapp_url))],
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filters")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            search_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def premium(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /premium"""
        premium_text = """
‚≠ê <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>

<b>üåü PREMIUM (250 ‚≠ê/–º–µ—Å—è—Ü)</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è
‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç
‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∫–∞–∑–µ üìä

<b>üíé PLATINUM (500 ‚≠ê/–º–µ—Å—è—Ü)</b>
‚Ä¢ –í—Å—ë –∏–∑ Premium +
‚Ä¢ AI —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ü§ñ
‚Ä¢ –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º üëª
‚Ä¢ –í–∏–¥–µ—Ç—å –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã üëÅÔ∏è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üéØ

<b>üí≥ Telegram Stars</b>
–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars - –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!

<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
‚Ä¢ –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è Premium - –ë–ï–°–ü–õ–ê–¢–ù–û! üéÅ
‚Ä¢ –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –Ω–∞ –º–µ—Å—è—Ü - —Å–∫–∏–¥–∫–∞ 20% üí∞
        """
        
        keyboard = [
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Premium", 
                                web_app=WebAppInfo(url=f"{self.webapp_url}/premium"))],
            [InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å Platinum", 
                                web_app=WebAppInfo(url=f"{self.webapp_url}/premium"))],
            [InlineKeyboardButton("üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="free_trial")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            premium_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def settings(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        user_id = update.effective_user.id
        user_data = await self.get_user_data(user_id)
        
        settings_text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –º–∞—Ç—á–∏: ‚úÖ
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ‚úÖ
‚Ä¢ –õ–∞–π–∫–∏: ‚úÖ
‚Ä¢ Premium –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ‚ùå

<b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ: ‚úÖ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ‚úÖ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ‚úÖ

<b>–§–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: 18-99
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: 50 –∫–º
‚Ä¢ –¢–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ: ‚ùå
        """
        
        keyboard = [
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications")],
            [InlineKeyboardButton("üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="privacy")],
            [InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="filters")],
            [InlineKeyboardButton("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Web App", 
                                web_app=WebAppInfo(url=f"{self.webapp_url}/settings"))],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def help(self, update: Update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/matches - –ú–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
/search - –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç
/premium - Premium –ø–æ–¥–ø–∏—Å–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ Web App
2. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ
3. –ù–∞—á–Ω–∏ —Å–≤–∞–π–ø–∞—Ç—å –∞–Ω–∫–µ—Ç—ã
4. –ü–æ–ª—É—á–∞–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –æ–±—â–∞–π—Å—è!

<b>–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ç–æ?</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–∫–∞–∂–∏ –ª–∏—Ü–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–æ—Ç–æ
‚Ä¢ –î–æ–±–∞–≤—å 3-6 —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
‚Ä¢ üìß –ù–∞–ø–∏—à–∏ @support
‚Ä¢ üí¨ –ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @flirtly_support
‚Ä¢ üåê –°–∞–π—Ç: https://flirtly.app
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å Web App", 
                                web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support")],
            [InlineKeyboardButton("üí¨ –ì—Ä—É–ø–ø–∞", url="https://t.me/flirtly_support")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data == "back_to_start":
            await self.start(update, context)
        
        elif data == "profile":
            await self.profile(update, context)
        
        elif data == "matches":
            await self.matches(update, context)
        
        elif data == "search":
            await self.search(update, context)
        
        elif data == "premium":
            await self.premium(update, context)
        
        elif data == "settings":
            await self.settings(update, context)
        
        elif data.startswith("chat_"):
            match_id = data.split("_")[1]
            await self.start_chat(user_id, match_id, query)
        
        elif data == "referral":
            await self.show_referral(user_id, query)
        
        elif data == "free_trial":
            await self.activate_free_trial(user_id, query)
    
    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        active_chat = await self.get_active_chat(user_id)
        
        if active_chat:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ç—á—É
            await self.forward_message_to_match(
                from_user=user_id,
                to_user=active_chat['partner_id'],
                message=message_text
            )
            
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ Web App
            await update.message.reply_text(
                "üí¨ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.\n\n"
                "–û—Ç–∫—Ä–æ–π Web App —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç—ã", 
                                       web_app=WebAppInfo(url=f"{self.webapp_url}/chats"))
                ]])
            )
    
    # ===================================
    # HELPER METHODS (Mock implementations)
    # ===================================
    
    async def check_user_exists(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # Mock implementation
        return True
    
    async def get_user_data(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # Mock implementation
        return {
            'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'age': 25,
            'gender': 'male',
            'looking_for': 'female',
            'city': '–ú–æ—Å–∫–≤–∞',
            'likes_sent': 5,
            'likes_received': 12,
            'matches_count': 3,
            'active_chats': 1,
            'is_premium': False,
            'premium_until': None,
            'photos': ['photo1.jpg', 'photo2.jpg']
        }
    
    async def get_user_matches(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # Mock implementation
        return [
            {'id': 1, 'name': '–ê–Ω–Ω–∞', 'age': 23},
            {'id': 2, 'name': '–ú–∞—Ä–∏—è', 'age': 26},
            {'id': 3, 'name': '–ï–ª–µ–Ω–∞', 'age': 24}
        ]
    
    async def get_active_chat(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞"""
        # Mock implementation
        return None
    
    async def forward_message_to_match(self, from_user: int, to_user: int, message: str):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Ç—á—É"""
        # Mock implementation
        pass
    
    async def start_chat(self, user_id: int, match_id: int, query):
        """–ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –º–∞—Ç—á–µ–º"""
        await query.edit_message_text(
            f"üí¨ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {match_id}\n\n"
            "–û—Ç–∫—Ä–æ–π Web App –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ö° –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", 
                                   web_app=WebAppInfo(url=f"{self.webapp_url}/chat/{match_id}"))
            ]])
        )
    
    async def show_referral(self, user_id: int, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
        ref_link = f"https://t.me/FFlirtly_bot?start=ref_{user_id}"
        
        await query.edit_message_text(
            f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
            f"<b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:</b>\n"
            f"‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å: +10 –ª–∞–π–∫–æ–≤\n"
            f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +5 –ª–∞–π–∫–æ–≤\n\n"
            f"<b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{ref_link}</code>\n\n"
            f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è!",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
                                   url=f"https://t.me/share/url?url={ref_link}&text=üî• –ü–æ–ø—Ä–æ–±—É–π Flirtly!")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
    
    async def activate_free_trial(self, user_id: int, query):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        await query.edit_message_text(
            "üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "–¢—ã –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º Premium —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 7 –¥–Ω–µ–π:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏ ‚ù§Ô∏è\n"
            "‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤ –≤ –¥–µ–Ω—å ‚ö°\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã üîç\n"
            "‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª üëÄ\n\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è Premium –æ–ø—ã—Ç–æ–º!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ö° –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", 
                                   web_app=WebAppInfo(url=self.webapp_url))
            ]])
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Flirtly Bot...")
        self.app.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = os.getenv("BOT_TOKEN", "8430527446:AAFLoCZqvreDpsgz4d5z4J5LXMLC42B9ex0")
    WEBAPP_URL = os.getenv("WEBAPP_URL", "https://vlamay.github.io/flirtly-webapp")
    
    bot = FlirtlyBot(BOT_TOKEN, WEBAPP_URL)
    bot.run()