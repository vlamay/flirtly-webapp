# src/bot_full.py - Full bot with database integration

import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from sqlalchemy.ext.asyncio import AsyncSession

from src.database import (
    init_db, async_session_maker, 
    User, get_or_create_user, get_user_by_telegram_id
)
from src.matching import MatchingEngine
from src.features import ReferralSystem

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
BOT_TOKEN = "8430527446:AAFLoCZqvreDpsgz4d5z4J5LXMLC42B9ex0"
WEBAPP_URL = "https://vlamay.github.io/flirtly-webapp/"

# Initialize
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def get_main_keyboard() -> InlineKeyboardMarkup:
    """Main keyboard"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üíï –ú–∞—Ç—á–∏", callback_data="matches")
        ],
        [
            InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="referral"),
            InlineKeyboardButton(text="‚≠ê Premium", callback_data="premium")
        ]
    ])


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Start command with referral handling"""
    async with async_session_maker() as session:
        telegram_id = message.from_user.id
        username = message.from_user.username
        
        # Get or create user
        user = await get_or_create_user(telegram_id, username, session)
        
        # Handle referral
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("ref_"):
            try:
                referrer_telegram_id = int(args[1].replace("ref_", ""))
                referrer = await get_user_by_telegram_id(referrer_telegram_id, session)
                
                if referrer and referrer.id != user.id:
                    # Process referral
                    result = await ReferralSystem.process_referral(
                        referrer.id,
                        user.id,
                        session
                    )
                    
                    if result['success']:
                        # Notify referrer
                        try:
                            await bot.send_message(
                                referrer.telegram_id,
                                f"üéÅ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
                                f"@{username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!\n\n"
                                f"–¢—ã –ø–æ–ª—É—á–∏–ª +{result['referrer_bonus']} –ª–∞–π–∫–æ–≤! ‚ù§Ô∏è",
                                parse_mode="HTML"
                            )
                        except:
                            pass
            except:
                pass
        
        # Check if profile is complete
        if not user.name or not user.photos:
            # New user - needs onboarding
            await message.answer(
                f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã</b>\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Flirtly</b> ‚ö°\n\n"
                f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
        else:
            # Existing user
            await message.answer(
                f"<b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name}! üëã</b>\n\n"
                f"<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {user.daily_likes_remaining}\n"
                f"‚Ä¢ üíï –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user.matches_count}\n"
                f"‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è: {user.views_count}\n\n"
                f"–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–∞–π–ø!",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )


@dp.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    """Handle data from Web App"""
    import json
    
    async with async_session_maker() as session:
        try:
            data = json.loads(message.web_app_data.data)
            action = data.get('action')
            telegram_id = message.from_user.id
            
            user = await get_user_by_telegram_id(telegram_id, session)
            if not user:
                user = await get_or_create_user(telegram_id, message.from_user.username, session)
            
            if action == 'register':
                # Handle registration
                user.name = data.get('name')
                user.age = data.get('age')
                user.gender = data.get('gender')
                user.looking_for = data.get('looking_for')
                user.bio = data.get('bio', '')
                user.photos = ','.join(data.get('photos', []))
                
                # Location
                user.city = data.get('city')
                user.country = data.get('country')
                user.latitude = data.get('latitude')
                user.longitude = data.get('longitude')
                
                await session.commit()
                
                await message.answer(
                    f"üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!\n\n"
                    f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è! ‚ö°",
                    parse_mode="HTML"
                )
            
            elif action == 'like' or action == 'superlike':
                profile_id = data.get('profile_id')
                is_super_like = (action == 'superlike')
                
                # Check limits
                if user.daily_likes_remaining <= 0:
                    await message.answer(
                        "üòî <b>–õ–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n"
                        "–ü–æ–ª—É—á–∏ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –ª–∞–π–∫–æ–≤!",
                        parse_mode="HTML"
                    )
                    return
                
                # Process like
                result = await MatchingEngine.process_like(
                    user,
                    profile_id,
                    is_super_like,
                    session
                )
                
                if result['is_match']:
                    # Match created!
                    matched_user = result['matched_user']
                    
                    await message.answer(
                        f"üéâ <b>–≠—Ç–æ Match!</b>\n\n"
                        f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å {matched_user.name}!\n\n"
                        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è! üí¨",
                        parse_mode="HTML"
                    )
                    
                    # Notify matched user
                    try:
                        await bot.send_message(
                            matched_user.telegram_id,
                            f"üéâ <b>–ù–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!</b>\n\n"
                            f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å {user.name}!\n\n"
                            f"–û—Ç–∫—Ä–æ–π Flirtly –∏ –Ω–∞—á–Ω–∏ –æ–±—â–∞—Ç—å—Å—è! üí¨",
                            parse_mode="HTML",
                            reply_markup=get_main_keyboard()
                        )
                    except:
                        pass
                else:
                    emoji = "‚≠ê" if is_super_like else "‚ù§Ô∏è"
                    await message.answer(f"{emoji} –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
            elif action == 'skip':
                profile_id = data.get('profile_id')
                
                await MatchingEngine.process_skip(user, profile_id, session)
                await message.answer("üëé –ü—Ä–æ–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"Error handling webapp data: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data == "profile")
async def callback_profile(callback):
    """Show profile"""
    async with async_session_maker() as session:
        user = await get_user_by_telegram_id(callback.from_user.id, session)
        
        if not user or not user.name:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å!", show_alert=True)
            return
        
        profile_text = (
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>–ò–º—è:</b> {user.name}, {user.age}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"<b>–û —Å–µ–±–µ:</b> {user.bio or '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –õ–∞–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user.likes_sent}\n"
            f"‚Ä¢ –õ–∞–π–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user.likes_received}\n"
            f"‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {user.matches_count}\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {user.views_count}\n\n"
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {user.subscription_type.value.upper()}"
        )
        
        await callback.message.edit_text(
            profile_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄ anback", callback_data="back")]
            ])
        )
    await callback.answer()


@dp.callback_query(F.data == "matches")
async def callback_matches(callback):
    """Show matches"""
    async with async_session_maker() as session:
        from sqlalchemy import select, or_
        from src.database import Match
        
        user = await get_user_by_telegram_id(callback.from_user.id, session)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        
        # Get matches
        result = await session.execute(
            select(Match).where(
                or_(
                    Match.user1_id == user.id,
                    Match.user2_id == user.id
                ),
                Match.is_active == True
            ).order_by(Match.created_at.desc())
        )
        matches = result.scalars().all()
        
        if not matches:
            await callback.message.edit_text(
                "üíï <b>–¢–≤–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</b>\n\n"
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.\n\n"
                "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏ —Å–≤–∞–π–ø–∞—Ç—å!",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄ anback", callback_data="back")]
                ])
            )
        else:
            text = f"üíï <b>–¢–≤–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({len(matches)})</b>\n\n"
            
            for match in matches[:10]:
                matched_user_id = match.user2_id if match.user1_id == user.id else match.user1_id
                matched_user = await session.get(User, matched_user_id)
                
                if matched_user:
                    text += f"‚Ä¢ {matched_user.name}, {matched_user.age}\n"
            
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄ anback", callback_data="back")]
                ])
            )
    
    await callback.answer()


@dp.callback_query(F.data == "referral")
async def callback_referral(callback):
    """Show referral program"""
    async with async_session_maker() as session:
        user = await get_user_by_telegram_id(callback.from_user.id, session)
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        
        ref_link = ReferralSystem.generate_referral_link(user.telegram_id)
        
        # Get referral stats
        stats = await ReferralSystem.get_referral_stats(user.id, session)
        
        await callback.message.edit_text(
            f"üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
            f"<b>–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:</b>\n"
            f"‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å: +10 –ª–∞–π–∫–æ–≤\n"
            f"‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +5 –ª–∞–π–∫–æ–≤\n\n"
            f"<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {stats['total_referrals']}\n"
            f"‚ù§Ô∏è –ë–æ–Ω—É—Å–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {user.bonus_likes}\n\n"
            f"<b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{ref_link}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                        url=f"https://t.me/share/url?url={ref_link}&text=üî• –ü–æ–ø—Ä–æ–±—É–π Flirtly!"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄ anback", callback_data="back")]
            ])
        )
    await callback.answer()


@dp.callback_query(F.data == "premium")
async def callback_premium(callback):
    """Show premium options"""
    await callback.message.edit_text(
        "‚≠ê <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "<b>üåü PREMIUM (250 ‚≠ê/–º–µ—Å—è—Ü)</b>\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ª–∞–π–∫–∏\n"
        "‚Ä¢ 5 —Å—É–ø–µ—Ä–ª–∞–π–∫–æ–≤/–¥–µ–Ω—å\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª\n\n"
        "<b>üíé PLATINUM (500 ‚≠ê/–º–µ—Å—è—Ü)</b>\n"
        "‚Ä¢ –í—Å—ë –∏–∑ Premium +\n"
        "‚Ä¢ AI —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∫–∞–∑–µ\n"
        "‚Ä¢ –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º\n\n"
        "–û—Ñ–æ—Ä–º–∏ —á–µ—Ä–µ–∑ Web App!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ö° –û—Ç–∫—Ä—ã—Ç—å Flirtly",
                    web_app=WebAppInfo(url=WEBAPP_URL)
                )
            ],
            [InlineKeyboardButton(text="‚óÄ anback", callback_data="back")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "back")
async def callback_back(callback):
    """Back to main menu"""
    await callback.message.edit_text(
        f"<b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!</b>\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Flirtly!",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


async def main():
    """Start bot"""
    logger.info("Initializing database...")
    await init_db()
    
    logger.info("Starting Flirtly Bot with full database integration...")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
